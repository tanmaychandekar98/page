{"version":3,"sources":["tech_circle.png","Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","state","timeRem","Date","getTime","this","timer","setInterval","tick","clearInterval","setState","time","Math","floor","React","Component","App","className","src","logo","alt","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,iNCqC5BC,E,kDAhCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,QAAU,IAAIC,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAGC,WAAY,IAAID,MAAOC,WAHlD,E,gEAME,IAAD,OACnBC,KAAKC,MAAQC,aACZ,kBACC,EAAKC,SAAQ,O,6CAKfC,cAAcJ,KAAKC,S,6BAGnBD,KAAKK,SAAS,CACbC,KAAO,IAAIR,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAGC,WAAY,IAAID,MAAOC,c,+BAIjE,OACE,6BACC,4CACA,gCAAMQ,KAAKC,MAAMR,KAAKJ,MAAMU,KAAX,MAAjB,MAAkDC,KAAKC,MAAMR,KAAKJ,MAAMU,KAAX,UAA7D,MAAwGC,KAAKC,MAAOR,KAAKJ,MAAMU,KAAX,KAAD,IAAyC,W,GA1B7IG,IAAMC,WCmBXC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,sDAEE,2BACA,uBAAGC,KAAK,wDAAwDC,OAAO,UAAvE,cAGF,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64d5fc3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tech_circle.efb72ff3.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nclass Clock extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttimeRem : new Date(2020, 3, 20, 0, 0, 0, 0).getTime() - new Date().getTime()\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(\n\t\t\t() => \n\t\t\t\tthis.tick(), 1000\n\t\t\t\n\t\t);\n\t}\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n\ttick() {\n\t\tthis.setState({\n\t\t\ttime : new Date(2020, 3, 20, 0, 0, 0, 0).getTime() - new Date().getTime()\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h4>Launching in</h4>\n\t\t\t\t\t<h5> {Math.floor(this.state.time/(1000*3600))} : {Math.floor(this.state.time%(1000*3600)/(1000*60))} : {Math.floor((this.state.time%(1000*3600))%(1000*60)/(1000))}</h5>\n\t\t\t\t</div>\n\t\t\t\n\t\t);\n\t}\n}\n\nexport default Clock;","import React from 'react';\nimport logo from './tech_circle.png';\nimport './App.css';\nimport Clock from './Clock.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <p>\n          Site by Tanmay Chandekar\n          <p>\n          <a href=\"https://in.linkedin.com/in/tanmay-chandekar-6676ab134\" target=\"_blank\">LinkedIn</a>\n          </p>\n        </p>\n        <Clock />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}